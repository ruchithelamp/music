{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1749700698688,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"pXCVywe6CgIi"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":42,"status":"ok","timestamp":1749700698734,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"ypR1-GUoCpBb"},"outputs":[],"source":["# CONFIGURATION: JUST CHANGE THIS PART PER NOTEBOOK\n","tar_indices = [8, 9]  # tar file window\n","output_name = \"csv_chunk_05\"  # unique per notebook\n","drive_target_dir = \"/content/drive/MyDrive/music_anthro_M2\""]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":322,"status":"ok","timestamp":1749700699057,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"5KYbeKuhCpEv"},"outputs":[],"source":["# IMPORTS\n","import os, json, tarfile, shutil, subprocess\n","import pandas as pd\n","import zstandard as zstd\n","from tqdm import tqdm"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17259,"status":"ok","timestamp":1749700716314,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"iOdULn57CpHF","outputId":"c513d9d4-ca9a-4cac-a566-d3639f187901"},"outputs":[{"name":"stdout","output_type":"stream","text":["fusermount: failed to unmount /content/drive: No such file or directory\n","Mounted at /content/drive\n","Folder exists\n"]}],"source":["# DRIVE MOUNT\n","!fusermount -u /content/drive || true\n","!rm -rf /content/drive\n","from google.colab import drive\n","drive.mount('/content/drive')\n","if os.path.exists(drive_target_dir):\n","    print(\"Folder exists\")\n","else:\n","    print(\"Folder does not exist\")"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1749700716321,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"Wiv6qYmeCpJo"},"outputs":[],"source":["# FLATTENING + PARSING FUNCTIONS\n","def flatten_json(obj, parentKey='', sep='_'):\n","  items = []\n","  for k, v in obj.items():\n","    childKey = f\"{parentKey}{sep}{k}\" if parentKey else k\n","    if isinstance(v, dict):\n","      items.extend(flatten_json(v, childKey, sep=sep).items())\n","    else:\n","      items.append((childKey, v))\n","  return dict(items)\n","\n","def extract_and_process_tar_zst(tar_path, record_list, chunk_size, csv_i, total_records):\n","  print(f\"üîç Decompressing + processing: {tar_path}\")\n","  with open(tar_path, 'rb') as f:\n","    dctx = zstd.ZstdDecompressor()\n","    with dctx.stream_reader(f) as reader:\n","      with tarfile.open(fileobj=reader, mode='r|*') as tfile:\n","        for i, member in enumerate(tfile):\n","          if member.isfile() and member.name.endswith(\".json\") and \"highlevel\" in member.name:\n","            try:\n","              file_obj = tfile.extractfile(member)\n","              data = json.load(file_obj)\n","              flat_data = flatten_json(data)\n","              flat_data[\"track_id\"] = os.path.basename(member.name).replace(\".json\", \"\")\n","              record_list.append(flat_data)\n","              total_records += 1\n","\n","              if len(record_list) \u003e= chunk_size:\n","                df = pd.DataFrame(record_list)\n","                out_path = os.path.join(output_f, f\"{output_name}__{csv_i}.csv\")\n","                df.to_csv(out_path, index=False)\n","                print(f\"üíæ Saved {csv_i} with {len(record_list)} records\")\n","                record_list.clear()\n","                csv_i += 1\n","            except Exception as e:\n","              print(f\"Error processing {member.name}: {e}\")\n","  return csv_i, total_records\n"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":43,"status":"ok","timestamp":1749700716367,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"x-o7rOVsCpMP"},"outputs":[],"source":["# PATH SETUP\n","folder = drive_target_dir\n","source_f = f'{folder}/acousticbrainz'\n","output_f = f'/content/{output_name}'\n","temp_extract_dir = f'/content/temp_extract'\n","\n","os.makedirs(output_f, exist_ok=True)\n","if os.path.exists(temp_extract_dir):\n","  subprocess.run(['rm', '-rf', temp_extract_dir])\n","os.makedirs(temp_extract_dir, exist_ok=True)"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":893,"status":"ok","timestamp":1749700717259,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"HsRZv1xHC_Xr"},"outputs":[],"source":["# tar decompress params\n","tar_files = sorted([f for f in os.listdir(source_f) if f.endswith('.tar.zst')])\n","tar_files_subset = [tar_files[i] for i in tar_indices]\n","chunk_size = 100_000\n","record_list = []\n","total_records = 0\n","csv_i = 1"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"eqLqQ8rPC_a7"},"outputs":[{"name":"stdout","output_type":"stream","text":["üöÄ Starting assigned tar.zst files...\n"]},{"name":"stderr","output_type":"stream","text":["\r  0%|          | 0/2 [00:00\u003c?, ?it/s]"]},{"name":"stdout","output_type":"stream","text":["üîç Decompressing + processing: /content/drive/MyDrive/music_anthro_M2/acousticbrainz/acousticbrainz-highlevel-json-20220623-16.tar.zst\n","üíæ Saved 1 with 100000 records\n","üíæ Saved 2 with 100000 records\n"]},{"name":"stderr","output_type":"stream","text":["\r  0%|          | 0/2 [03:16\u003c?, ?it/s]\n"]},{"ename":"KeyboardInterrupt","evalue":"","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-7-2643602562\u003e\u001b[0m in \u001b[0;36m\u003ccell line: 0\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtar\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtar_files_subset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0mtar_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msource_f\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtar\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----\u003e 5\u001b[0;31m   \u001b[0mcsv_i\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtotal_records\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextract_and_process_tar_zst\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtar_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecord_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mchunk_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcsv_i\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtotal_records\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# leftover csv write\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m\u003cipython-input-4-3780900859\u003e\u001b[0m in \u001b[0;36mextract_and_process_tar_zst\u001b[0;34m(tar_path, record_list, chunk_size, csv_i, total_records)\u001b[0m\n\u001b[1;32m     29\u001b[0m                 \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecord_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m                 \u001b[0mout_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput_f\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"{output_name}__{csv_i}.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 31\u001b[0;31m                 \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     32\u001b[0m                 \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"üíæ Saved {csv_i} with {len(record_list)} records\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m                 \u001b[0mrecord_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclear\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    331\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    332\u001b[0m                 )\n\u001b[0;32m--\u003e 333\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    334\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mto_csv\u001b[0;34m(self, path_or_buf, sep, na_rep, float_format, columns, header, index, index_label, mode, encoding, compression, quoting, quotechar, lineterminator, chunksize, date_format, doublequote, escapechar, decimal, errors, storage_options)\u001b[0m\n\u001b[1;32m   3965\u001b[0m         )\n\u001b[1;32m   3966\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 3967\u001b[0;31m         return DataFrameRenderer(formatter).to_csv(\n\u001b[0m\u001b[1;32m   3968\u001b[0m             \u001b[0mpath_or_buf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3969\u001b[0m             \u001b[0mlineterminator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlineterminator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py\u001b[0m in \u001b[0;36mto_csv\u001b[0;34m(self, path_or_buf, encoding, sep, columns, index_label, mode, compression, quoting, quotechar, lineterminator, chunksize, date_format, doublequote, escapechar, errors, storage_options)\u001b[0m\n\u001b[1;32m   1012\u001b[0m             \u001b[0mformatter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfmt\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1013\u001b[0m         )\n\u001b[0;32m-\u003e 1014\u001b[0;31m         \u001b[0mcsv_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1015\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1016\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcreated_buffer\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/formats/csvs.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    268\u001b[0m             )\n\u001b[1;32m    269\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 270\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_save\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    271\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    272\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_save\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u003e\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/formats/csvs.py\u001b[0m in \u001b[0;36m_save\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    273\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_need_to_save_header\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    274\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_save_header\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 275\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_save_body\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    276\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    277\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_save_header\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u003e\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/formats/csvs.py\u001b[0m in \u001b[0;36m_save_body\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    311\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstart_i\u001b[0m \u001b[0;34m\u003e=\u001b[0m \u001b[0mend_i\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    312\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 313\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_save_chunk\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart_i\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_i\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    314\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    315\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_save_chunk\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_i\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_i\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u003e\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/formats/csvs.py\u001b[0m in \u001b[0;36m_save_chunk\u001b[0;34m(self, start_i, end_i)\u001b[0m\n\u001b[1;32m    322\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    323\u001b[0m         \u001b[0mix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata_index\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mslicer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_values_for_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_number_format\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 324\u001b[0;31m         libwriters.write_csv_rows(\n\u001b[0m\u001b[1;32m    325\u001b[0m             \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m             \u001b[0mix\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mwriters.pyx\u001b[0m in \u001b[0;36mpandas._libs.writers.write_csv_rows\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["# MAIN LOOP\n","print(\"üöÄ Starting assigned tar.zst files...\")\n","for tar in tqdm(tar_files_subset):\n","  tar_path = os.path.join(source_f, tar)\n","  csv_i, total_records = extract_and_process_tar_zst(tar_path, record_list, chunk_size, csv_i, total_records)\n","\n","# leftover csv write\n","if record_list:\n","  df = pd.DataFrame(record_list)\n","  out_path = os.path.join(output_f, f\"{output_name}__{csv_i}.csv\")\n","  df.to_csv(out_path, index=False)\n","  print(f\"üíæ Final chunk {csv_i} saved with {len(record_list)} records\")\n","\n","shutil.rmtree(temp_extract_dir)\n","print(f\"‚úÖ DONE: {total_records} total records\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dG-ou1o3C_eF"},"outputs":[],"source":["# ZIP + MOVE TO DRIVE\n","zip_path = f\"/content/{output_name}.zip\"\n","!zip -r -q \"{zip_path}\" \"{output_f}\"\n","!cp \"{zip_path}\" \"{drive_target_dir}\"\n","print(f\"üéâ Zipped and moved to Drive: {output_name}.zip\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QE-i7u9RC_hL"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rTEcZ5RFCpO4"},"outputs":[],"source":[]}],"metadata":{"colab":{"authorship_tag":"ABX9TyOmWfzXp3V+CeCxQfB4uqP4","machine_shape":"hm","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}