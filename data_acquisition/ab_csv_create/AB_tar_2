{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1749697810065,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"pXCVywe6CgIi"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":44,"status":"ok","timestamp":1749697810113,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"ypR1-GUoCpBb"},"outputs":[],"source":["# CONFIGURATION: JUST CHANGE THIS PART PER NOTEBOOK\n","tar_indices = [2, 3]  # tar file window\n","output_name = \"csv_chunk_02\"  # unique per notebook\n","drive_target_dir = \"/content/drive/MyDrive/music_anthro_M2\""]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":234,"status":"ok","timestamp":1749697810349,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"5KYbeKuhCpEv"},"outputs":[],"source":["# IMPORTS\n","import os, json, tarfile, shutil, subprocess\n","import pandas as pd\n","import zstandard as zstd\n","from tqdm import tqdm"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19430,"status":"ok","timestamp":1749697829782,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"iOdULn57CpHF","outputId":"e71af4ac-3671-4753-dc9f-993a0bd7af7c"},"outputs":[{"name":"stdout","output_type":"stream","text":["fusermount: failed to unmount /content/drive: No such file or directory\n","Mounted at /content/drive\n","Folder exists\n"]}],"source":["# DRIVE MOUNT\n","!fusermount -u /content/drive || true\n","!rm -rf /content/drive\n","from google.colab import drive\n","drive.mount('/content/drive')\n","if os.path.exists(drive_target_dir):\n","    print(\"Folder exists\")\n","else:\n","    print(\"Folder does not exist\")"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1749697829785,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"Wiv6qYmeCpJo"},"outputs":[],"source":["# FLATTENING + PARSING FUNCTIONS\n","def flatten_json(obj, parentKey='', sep='_'):\n","  items = []\n","  for k, v in obj.items():\n","    childKey = f\"{parentKey}{sep}{k}\" if parentKey else k\n","    if isinstance(v, dict):\n","      items.extend(flatten_json(v, childKey, sep=sep).items())\n","    else:\n","      items.append((childKey, v))\n","  return dict(items)\n","\n","def extract_and_process_tar_zst(tar_path, record_list, chunk_size, csv_i, total_records):\n","  print(f\"🔍 Decompressing + processing: {tar_path}\")\n","  with open(tar_path, 'rb') as f:\n","    dctx = zstd.ZstdDecompressor()\n","    with dctx.stream_reader(f) as reader:\n","      with tarfile.open(fileobj=reader, mode='r|*') as tfile:\n","        for i, member in enumerate(tfile):\n","          if member.isfile() and member.name.endswith(\".json\") and \"highlevel\" in member.name:\n","            try:\n","              file_obj = tfile.extractfile(member)\n","              data = json.load(file_obj)\n","              flat_data = flatten_json(data)\n","              flat_data[\"track_id\"] = os.path.basename(member.name).replace(\".json\", \"\")\n","              record_list.append(flat_data)\n","              total_records += 1\n","\n","              if len(record_list) \u003e= chunk_size:\n","                df = pd.DataFrame(record_list)\n","                out_path = os.path.join(output_f, f\"{output_name}__{csv_i}.csv\")\n","                df.to_csv(out_path, index=False)\n","                print(f\"💾 Saved {csv_i} with {len(record_list)} records\")\n","                record_list.clear()\n","                csv_i += 1\n","            except Exception as e:\n","              print(f\"Error processing {member.name}: {e}\")\n","  return csv_i, total_records\n"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":0,"status":"ok","timestamp":1749697829786,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"x-o7rOVsCpMP"},"outputs":[],"source":["# PATH SETUP\n","folder = drive_target_dir\n","source_f = f'{folder}/acousticbrainz'\n","output_f = f'/content/{output_name}'\n","temp_extract_dir = f'/content/temp_extract'\n","\n","os.makedirs(output_f, exist_ok=True)\n","if os.path.exists(temp_extract_dir):\n","  subprocess.run(['rm', '-rf', temp_extract_dir])\n","os.makedirs(temp_extract_dir, exist_ok=True)"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":688,"status":"ok","timestamp":1749697830484,"user":{"displayName":"Ruchi Patil","userId":"03952295460083736307"},"user_tz":240},"id":"HsRZv1xHC_Xr"},"outputs":[],"source":["# tar decompress params\n","tar_files = sorted([f for f in os.listdir(source_f) if f.endswith('.tar.zst')])\n","tar_files_subset = [tar_files[i] for i in tar_indices]\n","chunk_size = 100_000\n","record_list = []\n","total_records = 0\n","csv_i = 1"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"eqLqQ8rPC_a7"},"outputs":[{"name":"stdout","output_type":"stream","text":["🚀 Starting assigned tar.zst files...\n"]},{"name":"stderr","output_type":"stream","text":["\r  0%|          | 0/2 [00:00\u003c?, ?it/s]"]},{"name":"stdout","output_type":"stream","text":["🔍 Decompressing + processing: /content/drive/MyDrive/music_anthro_M2/acousticbrainz/acousticbrainz-highlevel-json-20220623-10.tar.zst\n","💾 Saved 1 with 100000 records\n","💾 Saved 2 with 100000 records\n","💾 Saved 3 with 100000 records\n","💾 Saved 4 with 100000 records\n","💾 Saved 5 with 100000 records\n","💾 Saved 6 with 100000 records\n","💾 Saved 7 with 100000 records\n","💾 Saved 8 with 100000 records\n","💾 Saved 9 with 100000 records\n","💾 Saved 10 with 100000 records\n"]},{"name":"stderr","output_type":"stream","text":["\r 50%|█████     | 1/2 [12:47\u003c12:47, 767.28s/it]"]},{"name":"stdout","output_type":"stream","text":["🔍 Decompressing + processing: /content/drive/MyDrive/music_anthro_M2/acousticbrainz/acousticbrainz-highlevel-json-20220623-11.tar.zst\n","💾 Saved 11 with 100000 records\n","💾 Saved 12 with 100000 records\n","💾 Saved 13 with 100000 records\n","💾 Saved 14 with 100000 records\n","💾 Saved 15 with 100000 records\n","💾 Saved 16 with 100000 records\n","💾 Saved 17 with 100000 records\n","💾 Saved 18 with 100000 records\n","💾 Saved 19 with 100000 records\n","💾 Saved 20 with 100000 records\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 2/2 [26:53\u003c00:00, 806.70s/it]"]},{"name":"stdout","output_type":"stream","text":["✅ DONE: 2000000 total records\n"]},{"name":"stderr","output_type":"stream","text":["\n"]}],"source":["# MAIN LOOP\n","print(\"🚀 Starting assigned tar.zst files...\")\n","for tar in tqdm(tar_files_subset):\n","  tar_path = os.path.join(source_f, tar)\n","  csv_i, total_records = extract_and_process_tar_zst(tar_path, record_list, chunk_size, csv_i, total_records)\n","\n","# leftover csv write\n","if record_list:\n","  df = pd.DataFrame(record_list)\n","  out_path = os.path.join(output_f, f\"{output_name}__{csv_i}.csv\")\n","  df.to_csv(out_path, index=False)\n","  print(f\"💾 Final chunk {csv_i} saved with {len(record_list)} records\")\n","\n","shutil.rmtree(temp_extract_dir)\n","print(f\"✅ DONE: {total_records} total records\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"dG-ou1o3C_eF"},"outputs":[{"name":"stdout","output_type":"stream","text":["🎉 Zipped and moved to Drive: csv_chunk_02.zip\n"]}],"source":["# ZIP + MOVE TO DRIVE\n","zip_path = f\"/content/{output_name}.zip\"\n","!zip -r -q \"{zip_path}\" \"{output_f}\"\n","!cp \"{zip_path}\" \"{drive_target_dir}\"\n","print(f\"🎉 Zipped and moved to Drive: {output_name}.zip\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"QE-i7u9RC_hL"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"rTEcZ5RFCpO4"},"outputs":[],"source":[]}],"metadata":{"colab":{"authorship_tag":"ABX9TyOqjXxlD+5NCs+6mACw5RzO","machine_shape":"hm","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}